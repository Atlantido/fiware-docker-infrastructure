{
	"info": {
		"name": "fiware-docker",
		"_postman_id": "807722c7-0f4a-821c-e878-5f0120e9f7e0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Suscripción Orion Cygnus",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "fiware-service",
						"value": "SmartSpot"
					},
					{
						"key": "fiware-servicepath",
						"value": "/smartspot"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"entities\": [\n        {\n            \"type\": \"SmartSpot\",\n            \"isPattern\": \"true\",\n            \"id\": \".*\"\n        }\n    ],\n    \"attributes\": [\n        \"batteryLevel\",\n        \"temperature0\",\n        \"temperature1\",\n        \"humidity0\",\n        \"humidity1\",\n        \"noise\",\n        \"NO2\",\n        \"SO2\",\n        \"O3\",\n        \"H2S\",\n        \"CO\",\n        \"nearDevicesMinute\",\n        \"nearDevicesTenMinutes\",\n        \"nearDevicesHour\"\n    ],             \n    \"reference\": \"http://cygnus:5050/notify\",\n    \"duration\": \"P1M\"\n}    "
				},
				"url": {
					"raw": "http://localhost:1026/v1/subscribeContext",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "1026",
					"path": [
						"v1",
						"subscribeContext"
					]
				},
				"description": "Esta petición crea una suscripción en Orion estableciendo como dirección la url del callback de cygnus. \nentities: se establece el type, si se usa una regex y en el caso de ser true, .* es equivalente a any.\nattributes: se deben añadir cada uno de los atributos para los que se quiere recibir una notificación.\nreference: url callback.\nduration: tiempo durante el cuál la suscripción funcionará. P1M -> 1 month."
			},
			"response": []
		},
		{
			"name": "Retrieve raw historical context data",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "fiware-service",
						"value": "smartspot"
					},
					{
						"key": "fiware-servicepath",
						"value": "/smartspot"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:8666/STH/v1/contextEntities/type/SmartSpot/id/SmartSpot_FIRA:SmartSpot/attributes/CO?hLimit=10&hOffset=0&dateFrom=2017-10-01T00:00:00.000Z&dateTo=2017-10-31T23:59:59.999Z",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8666",
					"path": [
						"STH",
						"v1",
						"contextEntities",
						"type",
						"SmartSpot",
						"id",
						"SmartSpot_FIRA:SmartSpot",
						"attributes",
						"CO"
					],
					"query": [
						{
							"key": "hLimit",
							"value": "10",
							"equals": true
						},
						{
							"key": "hOffset",
							"value": "0",
							"equals": true
						},
						{
							"key": "dateFrom",
							"value": "2017-10-01T00:00:00.000Z",
							"equals": true
						},
						{
							"key": "dateTo",
							"value": "2017-10-31T23:59:59.999Z\n",
							"equals": true
						}
					]
				},
				"description": "Realiza una petición GET sobre la dirección y puerto en que se encuentra desplegado STH estableciendo en la uri: type, entity_id, attributes. \nMás información sobre los parámetros puede encontrarse en:\nhttps://fiware-sth-comet.readthedocs.io/en/latest/raw-data-retrieval/index.html\nEs necesario añadir como cabeceras el fiware-service y fiware-servicepath sobre el que se pregunta. Si no se conoce lanzar docker-compose en primer plano y ver los logs de cygnus puede ayudar"
			},
			"response": []
		},
		{
			"name": "Retrieve aggregated historical context data",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "fiware-service",
						"value": "smartspot"
					},
					{
						"key": "fiware-servicepath",
						"value": "/smartspot"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:8666/STH/v1/contextEntities/type/SmartSpot/id/SmartSpot_FIRA:SmartSpot/attributes/CO?aggrMethod=sum&aggrPeriod=second&dateFrom=2017-10-01T00:00:00.000Z&dateTo=2017-10-31T23:59:59.999Z",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8666",
					"path": [
						"STH",
						"v1",
						"contextEntities",
						"type",
						"SmartSpot",
						"id",
						"SmartSpot_FIRA:SmartSpot",
						"attributes",
						"CO"
					],
					"query": [
						{
							"key": "aggrMethod",
							"value": "sum",
							"equals": true
						},
						{
							"key": "aggrPeriod",
							"value": "second",
							"equals": true
						},
						{
							"key": "dateFrom",
							"value": "2017-10-01T00:00:00.000Z",
							"equals": true
						},
						{
							"key": "dateTo",
							"value": "2017-10-31T23:59:59.999Z",
							"equals": true
						}
					]
				},
				"description": "Realiza una petición GET sobre la dirección y puerto en que se encuentra desplegado STH estableciendo en la uri: type, entity_id, attributes. \nMás información sobre los parámetros puede encontrarse en:\nhttps://fiware-sth-comet.readthedocs.io/en/latest/aggregated-data-retrieval/index.html\nEs necesario añadir como cabeceras el fiware-service y fiware-servicepath sobre el que se pregunta. Si no se conoce lanzar docker-compose en primer plano y ver los logs de cygnus puede ayudar"
			},
			"response": []
		},
		{
			"name": "Retrieve Orion entities",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "fiware-service",
						"value": "SmartSpot"
					},
					{
						"key": "fiware-servicepath",
						"value": "/smartspot"
					}
				],
				"body": {},
				"url": {
					"raw": "http://localhost:1026/v2/entities?options=keyValues",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "1026",
					"path": [
						"v2",
						"entities"
					],
					"query": [
						{
							"key": "options",
							"value": "keyValues",
							"equals": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve grafana database",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"stmt\": \"SELECT * FROM \\\"doc\\\".\\\"etsmartspot\\\"\",\n\t\"args\": [1508880754043,1508937650171]\t\n}"
				},
				"url": {
					"raw": "http://localhost:4200/_sql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4200",
					"path": [
						"_sql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Subscription Orion QuantumLeap",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "fiware-service",
						"value": "SmartSpot"
					},
					{
						"key": "fiware-servicepath",
						"value": "/smartspot"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"description\": \"Test subscription\",\n    \"subject\": {\n        \"entities\": [\n        {\n            \"idPattern\": \".*\",\n            \"type\": \"SmartSpot\"\n        }\n        ]\n    },\n    \"notification\": {\n        \"http\": {\n            \"url\": \"http://192.168.1.193:8668/notify\"\n        },\n        \"attrs\": [\n        \"batteryLevel\",\n        \"temperature0\",\n        \"temperature1\",\n        \"humidity0\",\n        \"humidity1\",\n        \"noise\",\n        \"NO2\",\n        \"SO2\",\n        \"O3\",\n        \"H2S\",\n        \"CO\",\n        \"nearDevicesMinute\",\n        \"nearDevicesTenMinutes\",\n        \"nearDevicesHour\"\n        ],\n        \"metadata\": [\"dateCreated\", \"dateModified\"]\n    }\n}"
				},
				"url": {
					"raw": "http://localhost:1026/v2/subscriptions",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "1026",
					"path": [
						"v2",
						"subscriptions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Consulta Orion a través de Backend",
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "192.168.1.193:8000/api/v1/entities",
					"host": [
						"192",
						"168",
						"1",
						"193"
					],
					"port": "8000",
					"path": [
						"api",
						"v1",
						"entities"
					]
				}
			},
			"response": []
		},
		{
			"name": "Consulta Sth a través de Backend",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"type\": \"DistanceSensors\",\n\t\"id\": \"HOP240ac4105726:DistanceSensors\",\n\t\"attributes\": \"sensor1\",\n\t\"raw\": {\n\t\t\"lastN\": \"10\"\n\t}\n}"
				},
				"url": {
					"raw": "192.168.1.193:8000/api/v1/sth",
					"host": [
						"192",
						"168",
						"1",
						"193"
					],
					"port": "8000",
					"path": [
						"api",
						"v1",
						"sth"
					]
				}
			},
			"response": []
		}
	]
}